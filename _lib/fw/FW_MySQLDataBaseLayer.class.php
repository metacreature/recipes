<?php
/*
 File: FW_MySQLDataBaseLayer.class.php
 Copyright (c) 2014 Clemens K. (https://github.com/metacreature)
 
 MIT License
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
*/

define('FW_MySQLDataBaseLayer_file_name', 'DBQueries.'.hash('sha256', SECURE_SALT).'.log.html');

class FW_MySQLDataBaseLayer
{

    // ================= Init ================= //

    /**
     * _bSaveErrorSeperate
     * Defines if echa sql-error (syntax error in a query) should be saved seperatly
     */
    protected $_bSaveErrorSeperate = true;

    /**
     * _bSaveErrorOnShutDown
     * Defines if the complete query-log should be saved on shutdown if at minimum one sql-error (syntax error in a query) occured
     */
    protected $_bSaveErrorOnShutDown = true;

    /**
     * _bSaveLogOnShutDown
     * Defines if the complete query-log should be saved on shutdown
     */
    protected $_bSaveLogOnShutDown = false;

    /**
     * _sDumpFolder
     * Defines the subfolder where the table-dumps are stored
     * see _write
     */
    protected $_sDumpFolder = 'dump/';

    static $sLogFileName = FW_MySQLDataBaseLayer_file_name;

    // =========== Member Variables =========== //
    protected $_bIsInit = false;

    protected $_rMysqli;

    protected $_arrResource;

    protected $_arrLog = array();

    protected $_bLockedTables = false;

    protected $_bHasError = false;

    protected $_sTempLog;

    // coz of the function-args at the callstack which is generated by the ErrorLogger and the required memory (minor reason)
    protected static $_sTimeZone = 'UTC';

    /*
     * protected static $arrMySQLDateFormats = array(
     * FORMAT_DATETIME => '%Y-%m-%d %H:%i:%s',
     * FORMAT_DATE => '%Y-%m-%d',
     * FORMAT_TIME => '%H:%i:%s',
     * );
     */
    protected static $arrPHPDateFormats = array(
        FORMAT_DATETIME => 'Y-m-d H:i:s',
        FORMAT_DATE => 'Y-m-d',
        FORMAT_TIME => 'H:i:s'
    );

    protected static $arrDateLengthToFormat = array(
        19 => FORMAT_DATETIME,
        10 => FORMAT_DATE,
        8 => FORMAT_TIME
    );
    
    protected static $_singleton = null;
    
    static function singleton($bSaveLogOnShutDown = false) {
        if (!self::$_singleton) {
            self::$_singleton = new self($bSaveLogOnShutDown);
        }
        return self::$_singleton;
    }

    // ======== Constructor/Destructor ========= //
    function __construct($bSaveLogOnShutDown = false)
    {        
        $this->_bSaveLogOnShutDown = $bSaveLogOnShutDown;
        
        $this->_arrResource = array();
        $persistent = DB_PERSISTENT ? 'p:' : '';
        $this->_rMysqli = new mysqli($persistent . DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);

        if ($this->_rMysqli->connect_errno) {
            die('<div style="color:red; padding:20px;">Could not connect to database #1!</div>');
        }

        $this->_rMysqli->set_charset('utf8');
        //$this->_rMysqli->query('SET time_zone = ' . $this->MySQL_Safety(self::$_sTimeZone));

        $this->_bIsInit = true;
    }

    function __destruct()
    {
        if ($this->_bIsInit) {
            if ($this->_bLockedTables)
                $this->unlockTables();
            if ($this->_bSaveLogOnShutDown || ($this->_bSaveErrorOnShutDown && $this->_bHasError))
                $this->writeLog();
        }
        $this->_bIsInit = false;
    }

    // =========== Date-Conversion ============= //
    static function _dateToObj($sDate)
    {
        if (! is_string($sDate)) {
            return null;
        }
        // $sDate = str_replace('\'', '', $sDate);
        if (array_key_exists(strlen($sDate), self::$arrDateLengthToFormat)) {
            $sFormat = self::$arrDateLengthToFormat[strlen($sDate)];
            $oDate = DateTime::createFromFormat(self::$arrPHPDateFormats[$sFormat], $sDate, new DateTimeZone(self::$_sTimeZone));
            if ($oDate !== false) {
                switch ($sFormat) {
                    case FORMAT_DATE:
                        $oDate->setTime(23, 59, 59);
                        $oDate->setTimezone(new DateTimeZone(date_default_timezone_get()));
                        $oDate->setTime(0, 0, 0);
                        break;
                    case FORMAT_TIME:
                        $oDate->setTimezone(new DateTimeZone(date_default_timezone_get()));
                        $oDate->setDate(1900, 1, 1);
                        break;
                    default:
                        $oDate->setTimezone(new DateTimeZone(date_default_timezone_get()));
                        break;
                }
                return $oDate;
            }
        }
        return null;
    }

    function dateToObj($sDate)
    {
        return self::_dateToObj($sDate);
    }

    static function _objToDate($oDate, $bPrepareForQuery, $sFormat = FORMAT_DATE)
    {
        if ($oDate instanceof DateTime && array_key_exists($sFormat, self::$arrPHPDateFormats)) {
            $sDate = cloneObj($oDate)->setTimezone(new DateTimeZone(self::$_sTimeZone))->format(self::$arrPHPDateFormats[$sFormat]);
            if ($bPrepareForQuery) {
                // $sDate = 'STR_TO_DATE(\''.$sDate.'\',\''.self::$arrMySQLDateFormats[$sFormat].'\')';
                $sDate = '\'' . $sDate . '\'';
            }
            return $sDate;
        }
        return null;
    }

    function objToDate($oDate, $bPrepareForQuery, $sFormat = FORMAT_DATE)
    {
        return self::_objToDate($oDate, $bPrepareForQuery, $sFormat);
    }

    function objToTime($oDate, $bPrepareForQuery)
    {
        return self::_objToDate($oDate, $bPrepareForQuery, FORMAT_TIME);
    }

    function objToDateTime($oDate, $bPrepareForQuery)
    {
        return self::_objToDate($oDate, $bPrepareForQuery, FORMAT_DATETIME);
    }

    // ================ Getter ================ //
    function getIsInit()
    {
        return $this->_bIsInit;
    }

    // ========== Connection-Methods ========== //
    function close()
    {
        $this->_bIsInit = false;
        $this->_rMysqli->close();
    }

    // =========== Security-Methods =========== //
    function MySQL_Safety($mValue)
    {
        return '\'' . $this->_rMysqli->real_escape_string((string) $mValue) . '\'';
    }

    function MySQL_Safety_Array($arrAssocData)
    {
        foreach ($arrAssocData as $sKey => $mValue) {
            $arrAssocData[$sKey] = $this->MySQL_Safety($mValue);
        }
        return $arrAssocData;
    }

    function ArrayToSetString($arrAssocData)
    {
        foreach ($arrAssocData as $sFieldName => $mValue) {
            if (preg_match('#^[a-z0-9_`]*$#i', $sFieldName))
                $arrAssocData[$sFieldName] = $sFieldName . ' = ' . $this->MySQL_Safety($mValue);
            else {
                unset($arrAssocData[$sFieldName]);
                FW_ErrorLogger::printError('ArrayToSetString: Invalid Key ' . $sFieldName);
            }
        }
        return implode(', ', $arrAssocData);
    }

    function ArrayToInString($arrData)
    {
        return implode(', ', $this->MySQL_Safety_Array($arrData));
    }

    // ============ Query-Methods ============ //
    function executeQuery($sSQL, $iRn = 0)
    {
        $rRes = @$this->_rMysqli->query($sSQL);

        if ($rRes !== false) {
            $this->_arrResource[$iRn] = $rRes instanceof mysqli_result ? $rRes : null;
            $this->_arrLog[] = $iRn . ' ' . $sSQL;
            return true;
        }

        $sError = '<b>' . $iRn . ' ' . $sSQL . '
		<br>(ERROR)' . $this->_rMysqli->error . '</b>';
        $this->_arrLog[] = $sError;
        $this->_bHasError = true;

        if ($this->_bSaveErrorSeperate) {
            $this->_sTempLog = $sError;
            $this->_logError();
        }

        return false;
    }

    function executeUnbufferedQuery($sSQL, $iRn = 0)
    {
        $rRes = @$this->_rMysqli->query($sSQL, MYSQLI_USE_RESULT);

        if ($rRes !== false) {
            $this->_arrResource[$iRn] = $rRes instanceof mysqli_result ? $rRes : null;
            $this->_arrLog[] = $iRn . ' ' . $sSQL;
            return true;
        }

        $sError = '<b>' . $iRn . ' ' . $sSQL . '
		<br>(ERROR)' . $this->_rMysqli->error . '</b>';
        $this->_arrLog[] = $sError;
        $this->_bHasError = true;

        if ($this->_bSaveErrorSeperate) {
            $this->_sTempLog = $sError;
            $this->_logError();
        }

        return false;
    }

    function executePreparedQuery($sSQL, $data, $iRn = 0)
    {
        $rRes = @$this->_rMysqli->execute_query($sSQL, $data);

        if ($rRes !== false) {
            $this->_arrResource[$iRn] = $rRes instanceof mysqli_result ? $rRes : null;
            $this->_arrLog[] = $iRn . ' ' . $sSQL;
            return true;
        }

        $sError = '<b>' . $iRn . ' ' . $sSQL . '
		<br>(ERROR)' . $this->_rMysqli->error . '</b>';
        $this->_arrLog[] = $sError;
        $this->_bHasError = true;

        if ($this->_bSaveErrorSeperate) {
            $this->_sTempLog = $sError;
            $this->_logError();
        }

        return false;
    }

    // ============ Result-Methods ============ //
    function fetchAssoc($iRn = 0)
    {
        return $this->_arrResource[$iRn]->fetch_assoc();
    }

    function fetchRow($iRn = 0)
    {
        return $this->_arrResource[$iRn]->fetch_row();
    }

    function getAssocResults($iRn = 0)
    {
        $rRes = &$this->_arrResource[$iRn];
        $arrResult = array();
        while ($arrRow = $rRes->fetch_assoc()) {
            $arrResult[] = $arrRow;
        }
        $this->freeResult($iRn);
        return $arrResult;
    }

    function getRowResults($iRn = 0)
    {
        $rRes = &$this->_arrResource[$iRn];
        $arrResult = array();
        while ($arrRow = $rRes->fetch_row()) {
            $arrResult[] = $arrRow;
        }
        $this->freeResult($iRn);
        return $arrResult;
    }

    function getFormatedResults($mKeyFormat, $mValueFormat = null, $iRn = 0)
    {
        $rRes = &$this->_arrResource[$iRn];
        $arrResult = array();
        if (is_numeric($mKeyFormat) && is_null($mValueFormat)) {
            while ($arrRow = $rRes->fetch_row()) {
                $arrResult[$arrRow[$mKeyFormat]] = $arrRow;
            }
        } else if (! is_null($mKeyFormat) && is_null($mValueFormat)) {
            while ($arrRow = $rRes->fetch_assoc()) {
                $arrResult[$arrRow[$mKeyFormat]] = $arrRow;
            }
        } else if (is_numeric($mKeyFormat) && is_numeric($mValueFormat)) {
            while ($arrRow = $rRes->fetch_row()) {
                $arrResult[$arrRow[$mKeyFormat]] = $arrRow[$mValueFormat];
            }
        } else if (is_null($mKeyFormat) && is_numeric($mValueFormat)) {
            while ($arrRow = $rRes->fetch_row()) {
                $arrResult[] = $arrRow[$mValueFormat];
            }
        } else if (! is_null($mKeyFormat) && ! is_null($mValueFormat)) {
            while ($arrRow = $rRes->fetch_assoc()) {
                $arrResult[$arrRow[$mKeyFormat]] = $arrRow[$mValueFormat];
            }
        } else if (is_null($mKeyFormat) && ! is_null($mValueFormat)) {
            while ($arrRow = $rRes->fetch_assoc()) {
                $arrResult[] = $arrRow[$mValueFormat];
            }
        }
        $this->freeResult($iRn);
        return $arrResult;
    }

    function getMultiResults($mKeyFormat, $iRn = 0)
    {
        $rRes = &$this->_arrResource[$iRn];
        $arrResult = array();
        if (is_numeric($mKeyFormat)) {
            while ($arrRow = $rRes->fetch_row()) {
                $arrResult[$arrRow[$mKeyFormat]][] = $arrRow;
            }
        } else {
            while ($arrRow = $rRes->fetch_assoc()) {
                $arrResult[$arrRow[$mKeyFormat]][] = $arrRow;
            }
        }
        $this->freeResult($iRn);
        return $arrResult;
    }

    function getAffectedRows()
    {
        return $this->_rMysqli->affected_rows;
    }

    function getLastInsertId()
    {
        $rRes = @$this->_rMysqli->query('SELECT LAST_INSERT_ID()');
        if ($rRes) {
            $id = $rRes->fetch_row();
            $rRes->free_result();
            return $id[0];
        }
        return 0;
    }

    function getNumRows($iRn = 0)
    {
        return $this->_arrResource[$iRn]->num_rows;
    }

    function freeResult($iRn = 0)
    {
        $this->_arrResource[$iRn]->free_result();
    }

    function getResource($iRn = 0)
    {
        return $this->_arrResource[$iRn];
    }

    // ========== Transaction-Methods ========= //
    function begin()
    {
        $this->_rMysqli->begin_transaction();
        $this->_arrLog[] = 'BEGIN';
    }

    function commit()
    {
        $mRes = $this->_rMysqli->commit();
        $this->_arrLog[] = 'COMMIT';
        return $mRes ? true : false;
    }

    function rollback()
    {
        $this->_rMysqli->rollback();
        $this->_arrLog[] = 'ROLLBACK';
    }

    function lockTables($mTables)
    {
        if (is_array($mTables))
            $mTables = implode(' WRITE, ', $mTables);
        $this->_bLockedTables = true;
        $this->executeQuery('LOCK TABLES ' . $mTables . ' WRITE', 1846464);
    }

    function unlockTables()
    {
        $this->executeQuery('UNLOCK TABLES', 1846464);
        $this->_bLockedTables = false;
    }

    function optimizeTables($mTables)
    {
        if (is_string($mTables)) {
            $mTables = array(
                $mTables
            );
        }
        $this->executeQuery('OPTIMIZE TABLE ' . implode(', ', $mTables), 185674);
    }

    // ============== Info-Methods =========== //
    function showDatabases()
    {
        $arrDatabases = array();
        $this->executeUnbufferedQuery('SHOW DATABASES', 1846464);
        $rRes = &$this->_arrResource[1846464];
        while ($arrRow = $rRes->fetch_assoc()) {
            $arrDatabases[] = $arrRow['Database'];
        }
        return $arrDatabases;
    }

    function showTables($sDbName = '')
    {
        $arrTables = array();
        if ($sDbName)
            $this->executeUnbufferedQuery('SHOW TABLES FROM ' . $sDbName, 1846464);
        else
            $this->executeUnbufferedQuery('SHOW TABLES', 1846464);
        $rRes = &$this->_arrResource[1846464];
        while ($arrRow = $rRes->fetch_assoc()) {
            $arrTables[] = $arrRow;
        }
        return $arrTables;
    }

    function showColumns($sTableName, $bShowFullInfo = true)
    {
        $arrFields = array();
        if ($sTableName) {
            $this->executeUnbufferedQuery('SHOW COLUMNS FROM ' . $sTableName, 1846464);
            $rRes = &$this->_arrResource[1846464];
            while ($arrRow = $rRes->fetch_assoc()) {
                $arrFields[] = $arrRow;
            }
        }
        if ($bShowFullInfo)
            return $arrFields;

        $arrReturn = array();
        foreach ($arrFields as $arrField) {
            $arrReturn[$arrField['Field']] = $arrField['Field'];
        }
        return $arrReturn;
    }

    // ============ Logging-Methods =========== //
    function getLog()
    {
        return $this->_arrLog;
    }

    function printLog()
    {
        if (count($this->_arrLog))
            echo 'SQL Log: ' . count($this->_arrLog) . " Abfragen<br>\n<ul><li>" . implode("</li>\n<li>", $this->_arrLog) . '</li></ul>';
        else
            echo 'SQL Log: 0 Abfragen';
    }

    function writeLog()
    {
        if ($this->_bIsInit) {
            if (count($this->_arrLog)) {
                FW_ErrorLogger::writeInfo('SQL Log: ' . count($this->_arrLog) . " Abfragen<br>\n<ul><li>" . implode("</li>\n<li>", $this->_arrLog) . '</li></ul>', FW_MySQLDataBaseLayer::$sLogFileName);
            } else {
                FW_ErrorLogger::writeInfo('SQL Log: 0 Abfragen', FW_MySQLDataBaseLayer::$sLogFileName);
            }
        }
    }

    protected function _logError()
    {
        if ($this->_bIsInit) {
            FW_ErrorLogger::writeError("SQL Error:<br>\n" . $this->_sTempLog, FW_MySQLDataBaseLayer::$sLogFileName);
        }
        $this->_sTempLog = '';
    }
}
